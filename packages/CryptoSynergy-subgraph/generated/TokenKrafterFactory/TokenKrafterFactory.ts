// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BucketCreated extends ethereum.Event {
  get params(): BucketCreated__Params {
    return new BucketCreated__Params(this);
  }
}

export class BucketCreated__Params {
  _event: BucketCreated;

  constructor(event: BucketCreated) {
    this._event = event;
  }

  get creator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get bucket(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[2].value.toString();
  }

  get description(): string {
    return this._event.parameters[3].value.toString();
  }

  get tokenURI(): string {
    return this._event.parameters[4].value.toString();
  }

  get tokenAllocations(): Array<BucketCreatedTokenAllocationsStruct> {
    return this._event.parameters[5].value.toTupleArray<
      BucketCreatedTokenAllocationsStruct
    >();
  }
}

export class BucketCreatedTokenAllocationsStruct extends ethereum.Tuple {
  get tokenAddress(): Address {
    return this[0].toAddress();
  }

  get weightage(): BigInt {
    return this[1].toBigInt();
  }
}

export class TokenKrafterFactory extends ethereum.SmartContract {
  static bind(address: Address): TokenKrafterFactory {
    return new TokenKrafterFactory("TokenKrafterFactory", address);
  }

  deployedBuckets(): Array<Address> {
    let result = super.call(
      "deployedBuckets",
      "deployedBuckets():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_deployedBuckets(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "deployedBuckets",
      "deployedBuckets():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  swapRouter(): Address {
    let result = super.call("swapRouter", "swapRouter():(address)", []);

    return result[0].toAddress();
  }

  try_swapRouter(): ethereum.CallResult<Address> {
    let result = super.tryCall("swapRouter", "swapRouter():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get swapRouter_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateBucketCall extends ethereum.Call {
  get inputs(): CreateBucketCall__Inputs {
    return new CreateBucketCall__Inputs(this);
  }

  get outputs(): CreateBucketCall__Outputs {
    return new CreateBucketCall__Outputs(this);
  }
}

export class CreateBucketCall__Inputs {
  _call: CreateBucketCall;

  constructor(call: CreateBucketCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get description(): string {
    return this._call.inputValues[1].value.toString();
  }

  get bucketTokenURI(): string {
    return this._call.inputValues[2].value.toString();
  }

  get tokenAllocations(): Array<CreateBucketCallTokenAllocationsStruct> {
    return this._call.inputValues[3].value.toTupleArray<
      CreateBucketCallTokenAllocationsStruct
    >();
  }
}

export class CreateBucketCall__Outputs {
  _call: CreateBucketCall;

  constructor(call: CreateBucketCall) {
    this._call = call;
  }
}

export class CreateBucketCallTokenAllocationsStruct extends ethereum.Tuple {
  get tokenAddress(): Address {
    return this[0].toAddress();
  }

  get weightage(): BigInt {
    return this[1].toBigInt();
  }
}
